# Rasterizer configuration (strictly aligned with NEW_PLAN.md)
# Focus: consume glyph vector contours from existing SQLite DB (dataset/glyphs.db),
# produce 128×128 binary rasters + 16×16 (8px) cell grids + metadata.

version: 0.2
seed: 42
deterministic: true # Ensure reproducible ordering / numeric behavior where possible.

sources:
  glyph_db: dataset/glyphs.db # Pre-existing DB containing glyph contours & labels.

outputs:
  rasters_dir: data/rasters # 128x128 binary PNG (or npy) images
  grids_dir: data/grids # 16x16 cell primitive inputs (raw occupancy per cell)
  metadata_path: data/rasters/metadata.jsonl
  # Optional alternate float array export (disabled by default)
  export_numpy: false

raster:
  canvas_size: 128 # Final square canvas (pixels); main glyph largest dim scaled to 128.
  supersample_factor: 4 # render_size = canvas_size * supersample_factor = 512
  curve_subdivisions: 8 # Uniform subdivisions per cubic Bézier segment (Section 4.1)
  binarize_threshold: 0.5 # Threshold after downsampling to produce binary mask
  main_target_dim: 128 # Largest dimension (width or height) for non‑diacritic glyphs
  diacritic_target_dim: 64 # Largest dimension for diacritic glyphs (50% of canvas side)
  diacritic_ratio_threshold: 0.15 # Hybrid rule: (adv_width < 100) OR (ratio < 0.15) => diacritic
  diacritic_advance_threshold: 100 # Advance width threshold for hybrid diacritic detection (97.98% accuracy)
  exclude_large_diacritics: true # Exclude diacritics with adv>=100 AND ratio>=0.15 (2336 outliers, calligraphic forms)
  fill_rule: winding # Use signed area orientation: outer = fill, inner = hole
  store_mode: binary_uint8 # {binary_uint8 | float32}; binary per plan (0 or 255)
  engine: cairo # Rendering engine: {python | cairo}; cairo provides authoritative non-zero winding
  # No padding, jitter, gamma, or extra heuristics—these were not specified in the plan.

scaling:
  translate_min_to_origin: true # After scaling, shift so min_x, min_y → (0,0)
  preserve_aspect: true # Uniform scale by major dimension
  allow_upscale: true # Always scales to target dimension
  allow_downscale: true # (Kept for completeness; both cases happen)

grid:
  rows: 16 # 16×16 grid extraction (Section 5)
  cols: 16
  cell_px: 8 # Each cell spans 8×8 pixels at final resolution
  empty_primitive_id: 0 # All‑zero cell → primitive ID 0 (EMPTY)
  export_mode: occupancy # Binary occupancy per cell (future: could extend)

label_filter:
  min_count: 5 # Keep labels with frequency ≥ 5 (Section 3.3)
  drop_shaped_variants: false # Optional (plan notes possibility); default disabled

metadata:
  write: true
  include_fields:
    - glyph_id
    - label
    - font_hash
    - is_diacritic
    - original_bbox
    - scale_factor
    - major_dim_ratio
    - target_dim
  image_format: png # PNG binary (0/255)
  compression: 6

split:
  train_ratio: 0.86
  val_ratio: 0.10
  test_ratio: 0.04

validation:
  strict_bbox: false # Plan does not mandate bbox rejection thresholds
  require_nonempty_contours: true

performance:
  workers: 4 # Parallelism (not elaborated in plan; kept minimal)
  batch_commit: 256 # I/O grouping; simple pragmatic default

logging:
  level: INFO
  progress_every: 500
# Notes:
# - Removed font file discovery, padding, regex sampling, caching, and heuristic knobs not present in plan.
# - Supersampling fixed at 2× per Section 4.4 (render_size = 256 → downsample → 128).
# - Diacritic detection solely via ratio threshold (0.25) exactly as specified.
# - Cell grid is deterministic, row-major, no cropping for diacritics (Section 5).
